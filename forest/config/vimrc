"          _                    
"   _   __(_)___ ___  __________
"  | | / / / __ `__ \/ ___/ ___/
"  | |/ / / / / / / / /  / /__  
"  |___/_/_/ /_/ /_/_/   \___/  
                    

"vim-plug
call plug#begin('~/.vim/plugged')
"colorscheme
Plug 'morhetz/gruvbox'


"programing
Plug 'lervag/vimtex'
Plug 'neoclide/coc.nvim', {'branch':'release'}
Plug 'neovimhaskell/haskell-vim'

"gui
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'xuhdev/vim-latex-live-preview'
Plug 'lilydjwg/colorizer'

"Util
Plug 'scrooloose/nerdtree'
Plug 'ryanoasis/vim-devicons'
Plug 'liuchengxu/vim-which-key'
Plug 'vimlab/split-term.vim'
Plug 'majutsushi/tagbar'
    
call plug#end()


"###############
"#   GENERAL   #
"###############

syntax on
filetype plugin indent on

set wildmenu
set smartindent
set smarttab
set autoindent
set autoread
set splitright
set splitbelow
set noswapfile
set expandtab
set showmode
set hlsearch
set nu 

set guioptions+=m
set mouse=a
set laststatus=2
set statusline+=%#warningmsg#
set statusline+=%*
set encoding=utf-8
set tabstop=4
set shiftwidth=4
"set backspace=indent,eol,start
set timeoutlen=250
set clipboard+=unnamedplus

"coc-nvim config
set shortmess+=c


"###############
"#   GLOBALS   #
"###############

"leader map
let mapleader=" "
let g:livepreview_previewer = 'mupdf'
let g:livepreview_cursorhold_recompile = 0
let g:vimtex_compiler_progname = 'nvr'
let g:airline_powerline_fonts = 1
let g:airline_theme='deus'
let g:airline#extensions#tabline#enabled = 0
let NERDTreeShowHidden=1
let g:NERDTreeWinSize=23
let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`
let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`
let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`
let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles
let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`
let g:haskell_backpack = 1                " to enable highlighting of backpack keywords
let g:indentLine_char = '┊'


set background=dark
colorscheme gruvbox


"###############
"#  SHORTCUTS  #
"###############

if has('nvim')
    map <silent><space>t :call TermToggle(8)<CR>
else
    map <silent><space>t :terminal++rows=12<CR>
endif



"No leader
map <C-l> :LLPStartPreview<CR>

"Leader
nmap <silent><space>h :wincmd h<CR>
nmap <silent><space>l :wincmd l<CR>
nmap <silent><space>j :wincmd j<CR>
nmap <silent><space>k :wincmd k<CR>
nmap <silent><space>n :NERDTreeToggle<CR>
nmap <silent><space>nf :NERDTreeFind<CR>
nmap <silent><space>bn :bnext<CR>
nmap <silent><space>bp :bprev<CR>
map  <silent><space>w :wincmd w<CR>
map  <silent><space>q :close<CR>
map  <silent><space>sf :w<CR>
map  <silent><space>sq :wq<CR>
map  <silent><space>sv :vsp<CR>
map  <silent><space>sh :sp<CR>
map  <silent><space>ssf :source %<CR>
map  <silent><space>ho :noh<CR>
map  <space>pi :PlugInstall<CR>
map  <silent><space>pc :PlugClean<CR>
map <silent><space>ù :TagbarToggle<CR>
map <silent><space>gd <Plug>(coc-definition)
map  <space>f /

"Delete when learned
nnoremap <silent> <leader> :WhichKey '<Space>'<CR>


"###############
"#   ADVANCED  #
"###############

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction
inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()
inoremap <silent><expr> <C-space> coc#refresh()
"No NERDTree alone
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
"Load NERDTree on `vim`
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"CocNVIM CONFIG
"set cmdheight=2
set updatetime=10
" GoTo code navigation.
autocmd CursorHold * silent call CocActionAsync('highlight')


if has('python3')
    set pyx=3
elseif has ('python')
    set pyx=2
endif


let g:term_buf = 0
let g:term_win = 0
function! TermToggle(height)
    if win_gotoid(g:term_win)
        hide
    else
        botright new
        exec "resize " . a:height
        try
            exec "buffer " . g:term_buf
        catch
            call termopen($SHELL, {"detach": 0})
            let g:term_buf = bufnr("")
            set nonumber
            set norelativenumber
            set signcolumn=no
        endtry
        startinsert!
        let g:term_win = win_getid()
    endif
endfunction


